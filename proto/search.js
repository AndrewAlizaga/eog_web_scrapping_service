// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.SearchStatus = {
  UNKNOWN: 0,
  FINISHED: 1,
  COMPLETED: 2,
  FAILURE: 3,
  PENDING: 4,
  EXISTING: 5
}

var Search = exports.Search = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SearchRequest = exports.SearchRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SearchResponse = exports.SearchResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineSearch()
defineSearchRequest()
defineSearchResponse()

function defineSearch () {
  Search.encodingLength = encodingLength
  Search.encode = encode
  Search.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.id)) {
      var len = encodings.string.encodingLength(obj.id)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.leads)) {
      for (var i = 0; i < obj.leads.length; i++) {
        if (!defined(obj.leads[i])) continue
        var len = encodings.string.encodingLength(obj.leads[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 18
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.leads)) {
      for (var i = 0; i < obj.leads.length; i++) {
        if (!defined(obj.leads[i])) continue
        buf[offset++] = 26
        encodings.string.encode(obj.leads[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: "",
      name: "",
      leads: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.leads.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSearchRequest () {
  SearchRequest.encodingLength = encodingLength
  SearchRequest.encode = encode
  SearchRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.caseName)) {
      var len = encodings.string.encodingLength(obj.caseName)
      length += 1 + len
    }
    if (defined(obj.searchName)) {
      var len = encodings.string.encodingLength(obj.searchName)
      length += 1 + len
    }
    if (defined(obj.apiKey)) {
      var len = encodings.string.encodingLength(obj.apiKey)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.caseName)) {
      buf[offset++] = 10
      encodings.string.encode(obj.caseName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.searchName)) {
      buf[offset++] = 18
      encodings.string.encode(obj.searchName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.apiKey)) {
      buf[offset++] = 26
      encodings.string.encode(obj.apiKey, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      caseName: "",
      searchName: "",
      apiKey: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.caseName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.searchName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.apiKey = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSearchResponse () {
  SearchResponse.encodingLength = encodingLength
  SearchResponse.encode = encode
  SearchResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.searchStatus)) {
      var len = encodings.enum.encodingLength(obj.searchStatus)
      length += 1 + len
    }
    if (defined(obj.search)) {
      var len = Search.encodingLength(obj.search)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.searchStatus)) {
      buf[offset++] = 8
      encodings.enum.encode(obj.searchStatus, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.search)) {
      buf[offset++] = 18
      varint.encode(Search.encodingLength(obj.search), buf, offset)
      offset += varint.encode.bytes
      Search.encode(obj.search, buf, offset)
      offset += Search.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      searchStatus: 0,
      search: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.searchStatus = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.search = Search.decode(buf, offset, offset + len)
        offset += Search.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
