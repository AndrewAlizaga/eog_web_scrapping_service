// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.RequestStatus = {
  UNKNOWN: 0,
  FINISHED: 1,
  SUCCESS: 2,
  FAILURE: 3,
  PENDING: 4
}

var Account = exports.Account = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var UpdateAccountRequest = exports.UpdateAccountRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PostAccountRequest = exports.PostAccountRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var GetAccountRequest = exports.GetAccountRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var GetAccountByEmailRequest = exports.GetAccountByEmailRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var AccountResponse = exports.AccountResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineAccount()
defineUpdateAccountRequest()
definePostAccountRequest()
defineGetAccountRequest()
defineGetAccountByEmailRequest()
defineAccountResponse()

function defineAccount () {
  Account.encodingLength = encodingLength
  Account.encode = encode
  Account.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.id)) {
      var len = encodings.string.encodingLength(obj.id)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.password)) {
      var len = encodings.string.encodingLength(obj.password)
      length += 1 + len
    }
    if (defined(obj.email)) {
      var len = encodings.string.encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 18
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.password)) {
      buf[offset++] = 26
      encodings.string.encode(obj.password, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.email)) {
      buf[offset++] = 34
      encodings.string.encode(obj.email, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: "",
      name: "",
      password: "",
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.password = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.email = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineUpdateAccountRequest () {
  UpdateAccountRequest.encodingLength = encodingLength
  UpdateAccountRequest.encode = encode
  UpdateAccountRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.id)) {
      var len = encodings.string.encodingLength(obj.id)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.password)) {
      var len = encodings.string.encodingLength(obj.password)
      length += 1 + len
    }
    if (defined(obj.email)) {
      var len = encodings.string.encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 18
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.password)) {
      buf[offset++] = 26
      encodings.string.encode(obj.password, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.email)) {
      buf[offset++] = 34
      encodings.string.encode(obj.email, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: "",
      name: "",
      password: "",
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.password = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.email = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePostAccountRequest () {
  PostAccountRequest.encodingLength = encodingLength
  PostAccountRequest.encode = encode
  PostAccountRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.password)) {
      var len = encodings.string.encodingLength(obj.password)
      length += 1 + len
    }
    if (defined(obj.email)) {
      var len = encodings.string.encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.name)) {
      buf[offset++] = 10
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.password)) {
      buf[offset++] = 18
      encodings.string.encode(obj.password, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.email)) {
      buf[offset++] = 26
      encodings.string.encode(obj.email, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      password: "",
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.password = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.email = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineGetAccountRequest () {
  GetAccountRequest.encodingLength = encodingLength
  GetAccountRequest.encode = encode
  GetAccountRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.accountId)) {
      var len = encodings.string.encodingLength(obj.accountId)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.accountId)) {
      buf[offset++] = 10
      encodings.string.encode(obj.accountId, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      accountId: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.accountId = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineGetAccountByEmailRequest () {
  GetAccountByEmailRequest.encodingLength = encodingLength
  GetAccountByEmailRequest.encode = encode
  GetAccountByEmailRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.email)) {
      var len = encodings.string.encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.email)) {
      buf[offset++] = 10
      encodings.string.encode(obj.email, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.email = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAccountResponse () {
  AccountResponse.encodingLength = encodingLength
  AccountResponse.encode = encode
  AccountResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.account)) {
      var len = Account.encodingLength(obj.account)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.status)) {
      var len = encodings.enum.encodingLength(obj.status)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.account)) {
      buf[offset++] = 10
      varint.encode(Account.encodingLength(obj.account), buf, offset)
      offset += varint.encode.bytes
      Account.encode(obj.account, buf, offset)
      offset += Account.encode.bytes
    }
    if (defined(obj.status)) {
      buf[offset++] = 16
      encodings.enum.encode(obj.status, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      account: null,
      status: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.account = Account.decode(buf, offset, offset + len)
        offset += Account.decode.bytes
        break
        case 2:
        obj.status = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
